Subject: [PATCH] 1_data_layer_4_PHW2
---
Index: src/test/java/ru/javaops/cloudjava/menuservice/storage/repositories/MenuItemRepositoryImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/javaops/cloudjava/menuservice/storage/repositories/MenuItemRepositoryImplTest.java b/src/test/java/ru/javaops/cloudjava/menuservice/storage/repositories/MenuItemRepositoryImplTest.java
new file mode 100644
--- /dev/null	(date 1725658597345)
+++ b/src/test/java/ru/javaops/cloudjava/menuservice/storage/repositories/MenuItemRepositoryImplTest.java	(date 1725658597345)
@@ -0,0 +1,142 @@
+package ru.javaops.cloudjava.menuservice.storage.repositories;
+
+import jakarta.persistence.EntityManager;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
+import org.springframework.context.annotation.Import;
+import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.jdbc.Sql;
+import org.springframework.test.context.jdbc.SqlGroup;
+import org.springframework.transaction.annotation.Propagation;
+import org.springframework.transaction.annotation.Transactional;
+import ru.javaops.cloudjava.menuservice.dto.SortBy;
+import ru.javaops.cloudjava.menuservice.storage.model.Category;
+import ru.javaops.cloudjava.menuservice.storage.model.MenuItem;
+import ru.javaops.cloudjava.menuservice.storage.repositories.updaters.MenuAttrUpdaters;
+import ru.javaops.cloudjava.menuservice.testutils.TestData;
+
+import java.lang.reflect.Field;
+import java.util.Arrays;
+import java.util.List;
+import java.util.function.Function;
+
+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;
+
+@DataJpaTest
+@Import(MenuAttrUpdaters.class)
+@Transactional(propagation = Propagation.NEVER)
+@ActiveProfiles("test")
+@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
+@SqlGroup({
+        @Sql(
+                scripts = "classpath:insert-menu.sql",
+                executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD
+        ),
+        @Sql(
+                scripts = "classpath:clear-menus.sql",
+                executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD
+        )
+})
+class MenuItemRepositoryImplTest {
+    @Autowired
+    private MenuItemRepository menuItemRepository;
+    @Autowired
+    private EntityManager em;
+
+    @Test
+    void updateMenu_updatesMenu_whenAllUpdateFieldsAreSet() {
+        var dto = TestData.updateMenuFullRequest();
+        var id = getIdByName("Cappuccino");
+        int updateCount = menuItemRepository.updateMenu(id, dto);
+        assertThat(updateCount).isEqualTo(1);
+        MenuItem updated = menuItemRepository.findById(id).get();
+        assertFieldsEquality(updated, dto, "name", "description", "price", "timeToCook", "imageUrl");
+    }
+
+    @Test
+    void updateMenu_updatesMenu_whenSomeUpdateFieldsAreSet() {
+        // TODO
+    }
+
+    @Test
+    void updateMenu_throws_whenUpdateRequestHasNotUniqueName() {
+        // TODO
+    }
+
+    @Test
+    void updateMenu_updatesNothing_whenNoMenuPresentInDB() {
+        // TODO
+    }
+
+    @Test
+    void getMenusFor_returnsCorrectListForDRINKS_sortedByPriceAsc() {
+        var drinks = menuItemRepository.getMenusFor(Category.DRINKS, SortBy.PRICE_ASC);
+        assertThat(drinks).hasSize(3);
+        assertElementsInOrder(drinks, MenuItem::getName, List.of("Cappuccino", "Wine", "Tea"));
+    }
+
+    @Test
+    void getMenusFor_returnsCorrectListForDRINKS_sortedByPriceDesc() {
+        // TODO
+    }
+
+    @Test
+    void getMenusFor_returnsCorrectListForDRINKS_sortedByNameAsc() {
+        // TODO
+    }
+
+    @Test
+    void getMenusFor_returnsCorrectListForDRINKS_sortedByNameDesc() {
+        // TODO
+    }
+
+    @Test
+    void getMenusFor_returnsCorrectListForDRINKS_sortedByDateAsc() {
+        // TODO
+    }
+
+    @Test
+    void getMenusFor_returnsCorrectListForDRINKS_sortedByDateDesc() {
+        // TODO
+    }
+
+    private Long getIdByName(String name) {
+        return em.createQuery("select m.id from MenuItem m where m.name= ?1", Long.class)
+                .setParameter(1, name)
+                .getSingleResult();
+    }
+
+    private <T, R> void assertFieldsEquality(T item, R dto, String... fields) {
+        assertFieldsExistence(item, dto, fields);
+        assertThat(item).usingRecursiveComparison()
+                .comparingOnlyFields(fields)
+                .isEqualTo(dto);
+    }
+
+    private <T, R> void assertElementsInOrder(List<T> items, Function<T, R> mapper, List<R> expectedElements) {
+        var actualNames = items.stream().map(mapper).toList();
+        assertThat(actualNames).containsExactlyElementsOf(expectedElements);
+    }
+
+    private <T, R> void assertFieldsExistence(T item, R dto, String... fields) {
+        boolean itemFieldsMissing = Arrays.stream(fields)
+                .anyMatch(field -> getField(item, field) == null);
+        boolean dtoFieldsMissing = Arrays.stream(fields)
+                .anyMatch(field -> getField(dto, field) == null);
+
+        if (itemFieldsMissing || dtoFieldsMissing) {
+            throw new AssertionError("One or more fields do not exist in the provided objects. Actual: %s. Expected: %s. Fields to compare: %s"
+                    .formatted(item, dto, List.of(fields)));
+        }
+    }
+
+    private <T> Field getField(T item, String fieldName) {
+        try {
+            return item.getClass().getDeclaredField(fieldName);
+        } catch (NoSuchFieldException e) {
+            return null;
+        }
+    }
+}
Index: src/test/java/ru/javaops/cloudjava/menuservice/testutils/TestConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/javaops/cloudjava/menuservice/testutils/TestConstants.java b/src/test/java/ru/javaops/cloudjava/menuservice/testutils/TestConstants.java
new file mode 100644
--- /dev/null	(date 1725658625333)
+++ b/src/test/java/ru/javaops/cloudjava/menuservice/testutils/TestConstants.java	(date 1725658625333)
@@ -0,0 +1,20 @@
+package ru.javaops.cloudjava.menuservice.testutils;
+
+import java.math.BigDecimal;
+
+public class TestConstants {
+
+    public static final String BASE_URL = "/v1/menu-items";
+
+    public static final String ITALIAN_SALAD_NAME = "Italian Salad";
+    public static final String ITALIAN_SALAD_DESCRIPTION = "Italian Salad description";
+    public static final BigDecimal ITALIAN_SALAD_PRICE = BigDecimal.TEN;
+    public static final long ITALIAN_SALAD_TIME_TO_COOK = 100;
+    public static final double ITALIAN_SALAD_WEIGHT = 200.0;
+    public static final String ITALIAN_SALAD_IMAGE_URL = "http://images.com/italian-salad.png";
+    public static final String ITALIAN_SALAD_GREENS_INGREDIENT = "greens";
+    public static final int ITALIAN_SALAD_GREENS_INGREDIENT_CALORIES = 100;
+    public static final String ITALIAN_SALAD_TOMATOES_INGREDIENT = "tomatoes";
+    public static final int ITALIAN_SALAD_TOMATOES_INGREDIENT_CALORIES = 200;
+
+}
Index: src/test/java/ru/javaops/cloudjava/menuservice/testutils/TestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/javaops/cloudjava/menuservice/testutils/TestData.java b/src/test/java/ru/javaops/cloudjava/menuservice/testutils/TestData.java
new file mode 100644
--- /dev/null	(date 1725658597361)
+++ b/src/test/java/ru/javaops/cloudjava/menuservice/testutils/TestData.java	(date 1725658597361)
@@ -0,0 +1,34 @@
+package ru.javaops.cloudjava.menuservice.testutils;
+
+import ru.javaops.cloudjava.menuservice.dto.UpdateMenuRequest;
+import ru.javaops.cloudjava.menuservice.storage.model.Ingredient;
+import ru.javaops.cloudjava.menuservice.storage.model.IngredientCollection;
+
+import java.math.BigDecimal;
+import java.util.List;
+
+import static ru.javaops.cloudjava.menuservice.testutils.TestConstants.*;
+
+
+public class TestData {
+
+    public static IngredientCollection italianSaladIngredients() {
+        return new IngredientCollection(
+                List.of(
+                        new Ingredient(ITALIAN_SALAD_GREENS_INGREDIENT, ITALIAN_SALAD_GREENS_INGREDIENT_CALORIES),
+                        new Ingredient(ITALIAN_SALAD_TOMATOES_INGREDIENT, ITALIAN_SALAD_TOMATOES_INGREDIENT_CALORIES)
+                )
+        );
+    }
+
+    public static UpdateMenuRequest updateMenuFullRequest() {
+        return UpdateMenuRequest.builder()
+                .name("New Cappuccino")
+                .price(BigDecimal.valueOf(100.01))
+                .timeToCook(2000L)
+                .description("New Cappuccino Description")
+                .imageUrl("http://images.com/new_cappuccino.png")
+                .build();
+    }
+
+}
Index: src/test/resources/insert-menu.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/insert-menu.sql b/src/test/resources/insert-menu.sql
new file mode 100644
--- /dev/null	(date 1725658597361)
+++ b/src/test/resources/insert-menu.sql	(date 1725658597361)
@@ -0,0 +1,8 @@
+insert into menu_items(name, description, price, category, time_to_cook, weight, image_url, ingredient_collection, created_at)
+values
+    ('Cappuccino', 'Nice Coffee', 10, 'DRINKS', 1000, 100, 'http://images.com/cappuccino.png', '{"ingredients":[{"name":"milk","calories":10},{"name":"water","calories":0},{"name":"coffe beans","calories":100}]}', '2024-02-18 10:23:54'),
+    ('Green Salad', 'Nice Green Salad', 20, 'SALADS', 10000, 1000, 'http://images.com/green-salad.png', '{"ingredients":[{"name":"greens","calories":10},{"name":"cucumber","calories":100},{"name":"tomatoes","calories":1000}]}', '2024-02-18 10:24:54'),
+    ('Wine', 'Nice Wine', 30, 'DRINKS', 10, 750, 'http://images.com/wine.png', '{"ingredients":[{"name":"water","calories":0},{"name":"wine","calories":100}]}', '2024-02-18 10:25:54'),
+    ('Tea', 'Nice Tea', 40, 'DRINKS', 500, 200, 'http://images.com/tea.png', '{"ingredients":[{"name":"black tea","calories":10},{"name":"water","calories":0}]}', '2024-02-18 10:26:54'),
+    ('Hot Dog', 'Nice Hot Dog', 50, 'SNACKS', 300, 300, 'http://images.com/hot-dog.png', '{"ingredients":[{"name":"sausage","calories":200},{"name":"bread","calories":400}]}', '2024-02-18 10:27:54'),
+    ('Georgian Salad', 'Nice Georgian Salad', 60, 'SALADS', 1000, 100, 'http://images.com/georgian-salad.png', '{"ingredients":[{"name":"greens","calories":100},{"name":"cucumber","calories":10},{"name":"sauce","calories":200}]}', '2024-02-18 10:28:54');
\ No newline at end of file
Index: src/test/resources/application-test.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/application-test.yml b/src/test/resources/application-test.yml
new file mode 100644
--- /dev/null	(date 1725658597361)
+++ b/src/test/resources/application-test.yml	(date 1725658597361)
@@ -0,0 +1,6 @@
+spring:
+  datasource:
+    driver-class-name: org.testcontainers.jdbc.ContainerDatabaseDriver
+    url: jdbc:tc:postgresql:16.1:///test_database
+    username: user
+    password: password
\ No newline at end of file
Index: src/test/resources/clear-menus.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/clear-menus.sql b/src/test/resources/clear-menus.sql
new file mode 100644
--- /dev/null	(date 1725658597361)
+++ b/src/test/resources/clear-menus.sql	(date 1725658597361)
@@ -0,0 +1,1 @@
+delete from menu_items;
\ No newline at end of file
