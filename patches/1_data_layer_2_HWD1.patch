Subject: [PATCH] 1_data_layer_2_HWD1
---
Index: src/main/java/ru/javaops/cloudjava/menuservice/storage/model/Category.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javaops/cloudjava/menuservice/storage/model/Category.java b/src/main/java/ru/javaops/cloudjava/menuservice/storage/model/Category.java
new file mode 100644
--- /dev/null	(revision 64e83d5f3645dc28d2787854865e36c366c6e9ee)
+++ b/src/main/java/ru/javaops/cloudjava/menuservice/storage/model/Category.java	(revision 64e83d5f3645dc28d2787854865e36c366c6e9ee)
@@ -0,0 +1,24 @@
+package ru.javaops.cloudjava.menuservice.storage.model;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import org.springframework.http.HttpStatus;
+import ru.javaops.cloudjava.menuservice.exception.MenuServiceException;
+
+public enum Category {
+    BREAKFAST,
+    LUNCH,
+    DINNER,
+    DRINKS,
+    SNACKS,
+    SALADS;
+
+    @JsonCreator
+    public static Category fromString(String str) {
+        try {
+            return Category.valueOf(str.toUpperCase());
+        } catch (IllegalArgumentException e) {
+            var msg = "Failed to create Category from string: %s".formatted(str);
+            throw new MenuServiceException(msg, HttpStatus.BAD_REQUEST);
+        }
+    }
+}
Index: src/main/java/ru/javaops/cloudjava/menuservice/storage/model/Ingredient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javaops/cloudjava/menuservice/storage/model/Ingredient.java b/src/main/java/ru/javaops/cloudjava/menuservice/storage/model/Ingredient.java
new file mode 100644
--- /dev/null	(revision 64e83d5f3645dc28d2787854865e36c366c6e9ee)
+++ b/src/main/java/ru/javaops/cloudjava/menuservice/storage/model/Ingredient.java	(revision 64e83d5f3645dc28d2787854865e36c366c6e9ee)
@@ -0,0 +1,13 @@
+package ru.javaops.cloudjava.menuservice.storage.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class Ingredient {
+    private String name;
+    private int calories;
+}
Index: src/main/java/ru/javaops/cloudjava/menuservice/storage/model/IngredientCollection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javaops/cloudjava/menuservice/storage/model/IngredientCollection.java b/src/main/java/ru/javaops/cloudjava/menuservice/storage/model/IngredientCollection.java
new file mode 100644
--- /dev/null	(revision 64e83d5f3645dc28d2787854865e36c366c6e9ee)
+++ b/src/main/java/ru/javaops/cloudjava/menuservice/storage/model/IngredientCollection.java	(revision 64e83d5f3645dc28d2787854865e36c366c6e9ee)
@@ -0,0 +1,14 @@
+package ru.javaops.cloudjava.menuservice.storage.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.List;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class IngredientCollection {
+    private List<Ingredient> ingredients;
+}
Index: src/main/java/ru/javaops/cloudjava/menuservice/storage/model/MenuItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javaops/cloudjava/menuservice/storage/model/MenuItem.java b/src/main/java/ru/javaops/cloudjava/menuservice/storage/model/MenuItem.java
new file mode 100644
--- /dev/null	(revision 64e83d5f3645dc28d2787854865e36c366c6e9ee)
+++ b/src/main/java/ru/javaops/cloudjava/menuservice/storage/model/MenuItem.java	(revision 64e83d5f3645dc28d2787854865e36c366c6e9ee)
@@ -0,0 +1,75 @@
+package ru.javaops.cloudjava.menuservice.storage.model;
+
+import io.hypersistence.utils.hibernate.type.json.JsonBinaryType;
+import jakarta.persistence.*;
+import lombok.*;
+import org.hibernate.annotations.CreationTimestamp;
+import org.hibernate.annotations.Type;
+import org.hibernate.annotations.UpdateTimestamp;
+import org.hibernate.proxy.HibernateProxy;
+import org.springframework.format.annotation.DateTimeFormat;
+import ru.javaops.cloudjava.menuservice.util.DateUtil;
+
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
+
+@Getter
+@Setter
+@NoArgsConstructor
+@AllArgsConstructor
+@Builder
+@ToString
+@Table(name = "menu_items")
+@Entity
+public class MenuItem {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    @Column(name = "name", nullable = false)
+    private String name;
+    @Column(name = "description", nullable = false)
+    private String description;
+    @Column(name = "price", nullable = false)
+    private BigDecimal price;
+    @Column(name = "category", nullable = false)
+    @Enumerated(EnumType.STRING)
+    private Category category;
+    @Column(name = "time_to_cook", nullable = false)
+    private long timeToCook;
+    @Column(name = "weight", nullable = false)
+    private double weight;
+    @Column(name = "image_url", nullable = false)
+    private String imageUrl;
+    @Column(name = "created_at", nullable = false)
+    @CreationTimestamp
+    @DateTimeFormat(pattern = DateUtil.DATE_FORMAT)
+    private LocalDateTime createdAt;
+    @Column(name = "updated_at", nullable = false)
+    @UpdateTimestamp
+    @DateTimeFormat(pattern = DateUtil.DATE_FORMAT)
+    private LocalDateTime updatedAt;
+    @Type(JsonBinaryType.class)
+    @Column(name = "ingredient_collection", columnDefinition = "jsonb")
+    private IngredientCollection ingredientCollection;
+
+    /**
+     * Переопределяем equals и hashCode
+     * https://jpa-buddy.com/blog/hopefully-the-final-article-about-equals-and-hashcode-for-jpa-entities-with-db-generated-ids/
+     */
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getEffectiveClass(this) != getEffectiveClass(o)) return false;
+        return getId() != null && getId().equals(((MenuItem) o).getId());
+    }
+
+    @Override
+    public final int hashCode() {
+        return getEffectiveClass(this).hashCode();
+    }
+
+    private static Class<?> getEffectiveClass(Object o) {
+        return o instanceof HibernateProxy ?
+                ((HibernateProxy) o).getHibernateLazyInitializer().getPersistentClass() : o.getClass();
+    }
+}
Index: src/main/java/ru/javaops/cloudjava/menuservice/util/DateUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javaops/cloudjava/menuservice/util/DateUtil.java b/src/main/java/ru/javaops/cloudjava/menuservice/util/DateUtil.java
new file mode 100644
--- /dev/null	(revision 64e83d5f3645dc28d2787854865e36c366c6e9ee)
+++ b/src/main/java/ru/javaops/cloudjava/menuservice/util/DateUtil.java	(revision 64e83d5f3645dc28d2787854865e36c366c6e9ee)
@@ -0,0 +1,6 @@
+package ru.javaops.cloudjava.menuservice.util;
+
+public class DateUtil {
+
+    public static final String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
+}
